/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[2,5,13,14,16,25,27,31,36,38,48,53,57,60,61],$Ve=[1,36],$Vf=[1,52],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,53],$Vq=[1,60],$Vr=[15,18],$Vs=[1,79],$Vt=[1,72],$Vu=[1,70],$Vv=[1,71],$Vw=[1,73],$Vx=[1,74],$Vy=[1,81],$Vz=[1,82],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,80],$VF=[15,18,26,35,55,56,66,67,68,69,70,71,73,74,75,76,77],$VG=[1,91],$VH=[18,35,54],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[1,102],$VM=[1,103],$VN=[15,18,26,35,56,66,67,70,71,73,74,75,76,77],$VO=[15,18,35,56,70,71],$VP=[1,130],$VQ=[15,18,23,35],$VR=[15,18,26,35,56,70,71,73,74,75,76,77],$VS=[1,137],$VT=[18,56],$VU=[1,153],$VV=[15,18,35],$VW=[18,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"block":7,"statement":8,"assignment":9,"print":10,"ddl":11,"dml":12,"TK_BEGIN":13,"TK_END":14,"TK_SEMI_COLON":15,"TK_DECLARE":16,"variables":17,"TK_COMMA":18,"variable":19,"TK_AT":20,"TK_ID":21,"type":22,"TK_DEFAULT":23,"expression":24,"TK_SET":25,"TK_EQUAL":26,"TK_PRINT":27,"createTable":28,"alterTable":29,"dropTable":30,"TK_CREATE":31,"TK_TABLE":32,"TK_LEFT_PARENTHESIS":33,"attributes":34,"TK_RIGHT_PARENTHESIS":35,"TK_ALTER":36,"TK_ADD":37,"TK_DROP":38,"TK_COLUMN":39,"TK_RENAME":40,"TK_TO":41,"attribute":42,"insert":43,"select":44,"update":45,"truncate":46,"delete":47,"TK_INSERT":48,"TK_INTO":49,"id_list":50,"TK_VALUES":51,"values":52,"TK_SELECT":53,"TK_FROM":54,"TK_TIMES":55,"TK_WHERE":56,"TK_UPDATE":57,"columns":58,"column":59,"TK_TRUNCATE":60,"TK_DELETE":61,"arithmetic":62,"relational":63,"logical":64,"value":65,"TK_PLUS":66,"TK_MINUS":67,"TK_DIVIDE":68,"TK_MODULUS":69,"TK_AND":70,"TK_OR":71,"TK_NOT":72,"TK_GREATER_THAN":73,"TK_LESS_THAN":74,"TK_GREATER_EQUAL":75,"TK_LESS_EQUAL":76,"TK_NOT_EQUAL":77,"TK_INT":78,"TK_DOUBLE":79,"TK_DATE":80,"TK_VARCHAR":81,"TK_BOOLEAN":82,"TK_INTEGER":83,"TK_DECIMAL":84,"TK_TIME":85,"TK_TEXT":86,"TK_TRUE":87,"TK_FALSE":88,"TK_NULL":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"TK_BEGIN",14:"TK_END",15:"TK_SEMI_COLON",16:"TK_DECLARE",18:"TK_COMMA",20:"TK_AT",21:"TK_ID",23:"TK_DEFAULT",25:"TK_SET",26:"TK_EQUAL",27:"TK_PRINT",31:"TK_CREATE",32:"TK_TABLE",33:"TK_LEFT_PARENTHESIS",35:"TK_RIGHT_PARENTHESIS",36:"TK_ALTER",37:"TK_ADD",38:"TK_DROP",39:"TK_COLUMN",40:"TK_RENAME",41:"TK_TO",48:"TK_INSERT",49:"TK_INTO",51:"TK_VALUES",53:"TK_SELECT",54:"TK_FROM",55:"TK_TIMES",56:"TK_WHERE",57:"TK_UPDATE",60:"TK_TRUNCATE",61:"TK_DELETE",66:"TK_PLUS",67:"TK_MINUS",68:"TK_DIVIDE",69:"TK_MODULUS",70:"TK_AND",71:"TK_OR",72:"TK_NOT",73:"TK_GREATER_THAN",74:"TK_LESS_THAN",75:"TK_GREATER_EQUAL",76:"TK_LESS_EQUAL",77:"TK_NOT_EQUAL",78:"TK_INT",79:"TK_DOUBLE",80:"TK_DATE",81:"TK_VARCHAR",82:"TK_BOOLEAN",83:"TK_INTEGER",84:"TK_DECIMAL",85:"TK_TIME",86:"TK_TEXT",87:"TK_TRUE",88:"TK_FALSE",89:"TK_NULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[8,3],[17,3],[17,1],[19,3],[19,5],[9,6],[10,3],[11,1],[11,1],[11,1],[28,7],[29,6],[29,7],[29,7],[29,9],[34,3],[34,1],[42,2],[30,4],[12,1],[12,1],[12,1],[12,1],[12,1],[43,11],[44,5],[44,5],[44,7],[50,3],[50,1],[45,7],[58,3],[58,1],[59,3],[46,4],[47,6],[24,1],[24,1],[24,1],[24,1],[24,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,2],[64,3],[64,3],[64,2],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[22,1],[22,1],[22,1],[22,1],[22,1],[52,3],[52,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 14: case 28: case 41: case 44: case 74:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 19: case 20: case 21: case 31: case 32: case 33: case 34: case 35: case 48: case 49: case 50: case 51:
 this.$ = $$[$0]; 
break;
case 10:
 console.log({ line: this._$.first_line, column: this._$.first_column, type: 'Sintáctico', message: `Error sintáctico, token no esperado '${yytext}' .`}); 
break;
case 11:
 this.$ = new Block(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2]); 
break;
case 12:
 this.$ = new Statement(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 13: case 27: case 40: case 43: case 73:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 15:
 this.$ = {'line': _$[$0-2].first_line, 'column': _$[$0-2].first_column, 'name': $$[$0-1], 'type': $$[$0], 'value': undefined }; 
break;
case 16:
 this.$ = {'line': _$[$0-4].first_line, 'column': _$[$0-4].first_column, 'name': $$[$0-3], 'type': $$[$0-2], 'value': $$[$0] }; 
break;
case 17:
 this.$ = new Assignment(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]); 
break;
case 18:
 this.$ = new Print(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 22:
 this.$ = new CreateTable(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-2]);  
break;
case 23:
 this.$ = new Add(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1], $$[$0]); 
break;
case 24:
 this.$ = new DropColumn(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]); 
break;
case 25:
 this.$ = new Rename(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]); 
break;
case 26:
 this.$ = new RenameColumn(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-3], $$[$0-1]); 
break;
case 29:
 this.$ = new Field(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0]); 
break;
case 30:
 this.$ = new DropTable(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 36:
 this.$ = new Insert(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-6], $$[$0-2]); 
break;
case 37:
 this.$ = new Select(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-1], null); 
break;
case 38:
 this.$ = new Select(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-1], null); 
break;
case 39:
 this.$ = new Select(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 42:
 this.$ = new Update(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 45:
 this.$ = new Assignment(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 46:
 this.$ = new Truncate(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 47:
 this.$ = new Delete(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]); 
break;
case 52:
 this.$ = $$[$0-1]; 
break;
case 53:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.PLUS, $$[$0]); 
break;
case 54:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.MINUS, $$[$0]); 
break;
case 55:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.TIMES, $$[$0]); 
break;
case 56:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.DIVIDE, $$[$0]); 
break;
case 57:
 this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ArithmeticOption.MODULUS, $$[$0]); 
break;
case 58:
 this.$ = new Literal(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], Type.NEGATIVE) 
break;
case 59:
 this.$ = new Logical(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], LogicalOption.AND, $$[$0]); 
break;
case 60:
 this.$ = new Logical(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], LogicalOption.OR, $$[$0]); 
break;
case 61:
 this.$ = new Logical(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], LogicalOption.NOT, $$[$0-1]); 
break;
case 62:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.GREATER_THAN, $$[$0]); 
break;
case 63:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.LESS_THAN, $$[$0]); 
break;
case 64:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.GREATER_EQUAL, $$[$0]); 
break;
case 65:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.LESS_EQUAL, $$[$0]); 
break;
case 66:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.EQUAL, $$[$0]); 
break;
case 67:
 this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], RelationalOption.NOT_EQUAL, $$[$0]); 
break;
case 68:
 this.$ = 0; 
break;
case 69:
 this.$ = 1; 
break;
case 70:
 this.$ = 2; 
break;
case 71:
 this.$ = 3; 
break;
case 72:
 this.$ = 4; 
break;
case 75:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.INT); 
break;
case 76:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DOUBLE); 
break;
case 77:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DATE); 
break;
case 78:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.VARCHAR); 
break;
case 79: case 80:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.BOOLEAN); 
break;
case 81:
 this.$ = new Access(_$[$0].first_line, _$[$0].first_column, $$[$0], null); 
break;
case 82:
 this.$ = new Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.NULL); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,16:$V2,25:$V3,27:$V4,28:15,29:16,30:17,31:$V5,36:$V6,38:$V7,43:18,44:19,45:20,46:21,47:22,48:$V8,53:$V9,57:$Va,60:$Vb,61:$Vc},{1:[3]},{2:$V0,5:[1,31],6:32,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,16:$V2,25:$V3,27:$V4,28:15,29:16,30:17,31:$V5,36:$V6,38:$V7,43:18,44:19,45:20,46:21,47:22,48:$V8,53:$V9,57:$Va,60:$Vb,61:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),{2:$V0,4:33,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,16:$V2,25:$V3,27:$V4,28:15,29:16,30:17,31:$V5,36:$V6,38:$V7,43:18,44:19,45:20,46:21,47:22,48:$V8,53:$V9,57:$Va,60:$Vb,61:$Vc},{17:34,19:35,20:$Ve},{20:[1,37]},{21:$Vf,24:38,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},o($Vd,[2,19]),o($Vd,[2,20]),o($Vd,[2,21]),o($Vd,[2,31]),o($Vd,[2,32]),o($Vd,[2,33]),o($Vd,[2,34]),o($Vd,[2,35]),{32:[1,54]},{32:[1,55]},{32:[1,56]},{49:[1,57]},{21:$Vq,50:58,55:[1,59]},{21:[1,61]},{32:[1,62]},{54:[1,63]},{1:[2,1]},o($Vd,[2,2]),{2:$V0,6:32,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,14:[1,64],16:$V2,25:$V3,27:$V4,28:15,29:16,30:17,31:$V5,36:$V6,38:$V7,43:18,44:19,45:20,46:21,47:22,48:$V8,53:$V9,57:$Va,60:$Vb,61:$Vc},{15:[1,65],18:[1,66]},o($Vr,[2,14]),{21:[1,67]},{21:[1,68]},{15:[1,69],26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE},o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),{21:$Vf,24:83,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:84,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:85,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},o($VF,[2,75]),o($VF,[2,76]),o($VF,[2,77]),o($VF,[2,78]),o($VF,[2,79]),o($VF,[2,80]),o($VF,[2,81]),o($VF,[2,82]),{21:[1,86]},{21:[1,87]},{21:[1,88]},{21:[1,89]},{18:$VG,54:[1,90]},{54:[1,92]},o($VH,[2,41]),{25:[1,93]},{21:[1,94]},{21:[1,95]},{15:[1,96]},o($Vd,[2,12]),{19:97,20:$Ve},{22:98,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{26:[1,104]},o($Vd,[2,18]),{21:$Vf,24:105,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:106,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:107,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:108,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:109,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:110,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:111,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:112,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:113,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:114,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:115,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:116,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:117,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{26:$Vs,35:[1,118],55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE},o($VN,[2,58],{55:$Vt,68:$Vw,69:$Vx}),o($VO,[2,61],{26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE}),{33:[1,119]},{37:[1,120],38:[1,121],40:[1,122]},{15:[1,123]},{33:[1,124]},{21:[1,125]},{21:[1,126]},{21:[1,127]},{21:$VP,58:128,59:129},{15:[1,131]},{56:[1,132]},o($Vd,[2,11]),o($Vr,[2,13]),o($Vr,[2,15],{23:[1,133]}),o($VQ,[2,68]),o($VQ,[2,69]),o($VQ,[2,70]),o($VQ,[2,71]),o($VQ,[2,72]),{21:$Vf,24:134,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},o($VN,[2,53],{55:$Vt,68:$Vw,69:$Vx}),o($VN,[2,54],{55:$Vt,68:$Vw,69:$Vx}),o($VF,[2,55]),o($VF,[2,56]),o($VF,[2,57]),o($VR,[2,62],{55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VR,[2,63],{55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VR,[2,64],{55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VR,[2,65],{55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VR,[2,66],{55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VR,[2,67],{55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VO,[2,59],{26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE}),o([15,18,35,56,71],[2,60],{26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE}),o($VF,[2,52]),{21:$VS,34:135,42:136},{21:$VS,34:138,42:136},{39:[1,139]},{39:[1,141],41:[1,140]},o($Vd,[2,30]),{21:$Vq,50:142},{15:[1,143],56:[1,144]},o($VH,[2,40]),{15:[1,145]},{18:[1,147],56:[1,146]},o($VT,[2,44]),{26:[1,148]},o($Vd,[2,46]),{21:$Vf,24:149,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:150,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{15:[1,151],26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE},{18:$VU,35:[1,152]},o($VV,[2,28]),{22:154,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM},{15:[1,155],18:$VU},{21:$Vf,24:156,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$Vf,24:157,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:[1,158]},{18:$VG,35:[1,159]},o($Vd,[2,37]),{21:$Vf,24:160,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},o($Vd,[2,38]),{21:$Vf,24:161,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{21:$VP,59:162},{21:$Vf,24:163,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{15:[1,164],26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE},o($Vr,[2,16],{26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE}),o($Vd,[2,17]),{15:[1,165]},{21:$VS,42:166},o($VV,[2,29]),o($Vd,[2,23]),{15:[1,167],26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE},{15:[1,168],26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE},{41:[1,169]},{51:[1,170]},{15:[1,171],26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE},{15:[1,172],26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE},o($VT,[2,43]),o($VT,[2,45],{26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE}),o($Vd,[2,47]),o($Vd,[2,22]),o($VV,[2,27]),o($Vd,[2,24]),o($Vd,[2,25]),{21:$Vf,24:173,33:$Vg,62:39,63:40,64:41,65:42,67:$Vh,72:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},{33:[1,174]},o($Vd,[2,39]),o($Vd,[2,42]),{15:[1,175],26:$Vs,55:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE},{21:$Vf,52:176,65:177,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},o($Vd,[2,26]),{18:[1,179],35:[1,178]},o($VW,[2,74]),{15:[1,180]},{21:$Vf,65:181,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp},o($Vd,[2,36]),o($VW,[2,73])],
defaultActions: {31:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var text = "";
    var errors = [];
    var tokens = [];
   
    // const {errores} = require('./Errores');
    const {Type} = require('../Symbol/Type');
    //Expressions
    const {Literal} = require('../Expression/Literal');
    const {Access} = require('../Expression/Access');
    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Logical, LogicalOption} = require('../Expression/Logical');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Field} = require('../Expression/Field');
    //Instructions
    const {Block} = require('../Instruction/Block');
    const {Statement} = require('../Instruction/Statement');
    const {Assignment} = require('../Instruction/Assignment');
    const {Print} = require('../Instruction/Print');
    //DDL
    const {CreateTable} = require('../Instruction/CreateTable');
    const {Add} = require('../Instruction/Add')
    const {DropColumn} = require('../Instruction/DropColumn')
    const {Rename} = require('../Instruction/Rename')
    const {RenameColumn} = require('../Instruction/RenameColumn')
    const {DropTable} = require('../Instruction/DropTable');
    //DML
    const {Insert} = require('../Instruction/Insert');
    const {Select} = require('../Instruction/Select');
    const {Update} = require('../Instruction/Update');
    const {Truncate} = require('../Instruction/Truncate');
    const {Delete} = require('../Instruction/Delete');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:  
break;
case 1:  
break;
case 2:  
break;
case 3:  
break;
case 4:return 13;
break;
case 5:return 14;
break;
case 6:return 'TK_AS';
break;
case 7:return 'TK_CONTINUE';
break;
case 8:return 'TK_RETURN';
break;
case 9:return 31;
break;
case 10:return 36;
break;
case 11:return 38;
break;
case 12:return 32;
break;
case 13:return 37;
break;
case 14:return 40;
break;
case 15:return 39;
break;
case 16:return 'TK_FUNCTION';
break;
case 17:return 'TK_PROCEDURE';
break;
case 18:return 27;
break;
case 19:return 'TK_LOWER';
break;
case 20:return 'TK_UPPER';
break;
case 21:return 'TK_ROUND';
break;
case 22:return 'TK_LEN';
break;
case 23:return 'TK_TYPEOF';
break;
case 24:return 48;
break;
case 25:return 53;
break;
case 26:return 57;
break;
case 27:return 60;
break;
case 28:return 61;
break;
case 29:return 54;
break;
case 30:return 41;
break;
case 31:return 56;
break;
case 32:return 16;
break;
case 33:return 49;
break;
case 34:return 51;
break;
case 35:return 25;
break;
case 36:return 80;
break;
case 37:return 78;
break;
case 38:return 79;
break;
case 39:return 81;
break;
case 40:return 82;
break;
case 41:return 89;
break;
case 42:return 23;
break;
case 43:return 87;
break;
case 44:return 88;
break;
case 45:return 70;
break;
case 46:return 71;
break;
case 47:return 72;
break;
case 48:return 76;
break;
case 49:return 75;
break;
case 50:return 77;
break;
case 51:return 26;
break;
case 52:return 74;
break;
case 53:return 73;
break;
case 54:return 33;
break;
case 55:return 35;
break;
case 56:return 15;
break;
case 57:return 20;
break;
case 58:return 18;
break;
case 59:return 85;
break;
case 60:return 84;
break;
case 61:return 83;
break;
case 62:return 21;
break;
case 63: text = ""; this.begin("string"); 
break;
case 64: text += yy_.yytext; 
break;
case 65: text += "\""; 
break;
case 66: text += "\n"; 
break;
case 67: text += " "; 
break;
case 68: text += "\t"; 
break;
case 69: text += "\\"; 
break;
case 70: text += "\'"; 
break;
case 71: text += "\r"; 
break;
case 72: yy_.yytext = text; this.popState(); return 86; 
break;
case 73:return 66;
break;
case 74:return 67;
break;
case 75:return 55;
break;
case 76:return 68;
break;
case 77:return 69;
break;
case 78:return 5;
break;
case 79: errors.push({type:"Lexico", error:yy_.yytext, line:yy_.yylloc.first_line, column:yy_.yylloc.first_column}); 
break;
}
},
rules: [/^(?:\n)/i,/^(?:[ \r\t]+)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:--.*)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:as\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:create\b)/i,/^(?:alter\b)/i,/^(?:drop\b)/i,/^(?:table\b)/i,/^(?:add\b)/i,/^(?:rename\b)/i,/^(?:column\b)/i,/^(?:function\b)/i,/^(?:procedure\b)/i,/^(?:print\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:insert\b)/i,/^(?:select\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:from\b)/i,/^(?:to\b)/i,/^(?:where\b)/i,/^(?:declare\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:set\b)/i,/^(?:date\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:null\b)/i,/^(?:default\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:@)/i,/^(?:,)/i,/^(?:(\d{4})-(\d{1,2})-(\d{1,2}))/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[64,65,66,67,68,69,70,71,72],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}